class Solution {
    public String minWindow(String s, String t) {
         if (s == null || t == null || s.length() < t.length()) {
            return "";
        }

        Map<Character, Integer> tCount = new HashMap<>();
        for (char c : t.toCharArray()) {
            tCount.put(c, tCount.getOrDefault(c, 0) + 1);
        }

        Map<Character, Integer> windowCount = new HashMap<>();
        int have = 0;
        int need = tCount.size();
        int left = 0;
        int right = 0;
        int minLength = Integer.MAX_VALUE;
        int minLeft = 0;

        while (right < s.length()) {
            char rChar = s.charAt(right);
            windowCount.put(rChar, windowCount.getOrDefault(rChar, 0) + 1);

            if (tCount.containsKey(rChar) && windowCount.get(rChar).intValue() == tCount.get(rChar).intValue()) {
                have++;
            }

            while (have == need) {
                if ((right - left + 1) < minLength) {
                    minLength = right - left + 1;
                    minLeft = left;
                }

                char lChar = s.charAt(left);
                windowCount.put(lChar, windowCount.get(lChar) - 1);

                if (tCount.containsKey(lChar) && windowCount.get(lChar).intValue() < tCount.get(lChar).intValue()) {
                    have--;
                }

                left++;
            }

            right++;
        }

        return minLength == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLength);
    }
}
